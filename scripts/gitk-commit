#!/bin/bash

set -e -o pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/i18n.sh"

init_i18n 

flags=()
detailed=false
confirm=true
split=false

for arg in "$@"; do
    case "$arg" in
        --detailed) detailed=true ;;
        --yes|--no-confirm) confirm=false ;;
        --split) split=true ;;
        --*) flags+=("$arg") ;;
    esac
done

if git diff --cached --quiet; then
    t "Index is empty. Nothing to commit."
    exit 0
fi

if [[ "$split" == "true" ]]; then
    staged_files=$(git diff --cached --name-only)

    for file in $staged_files; do
        echo "$(t "Generating commit for file:") $file"
        file_diff=$(git diff --cached -- "$file")

        if [[ "$detailed" == "true" ]]; then
            commit_message=$(echo "$file_diff" | python3 "$SCRIPT_DIR/../generator.py" --detailed)
        else
            commit_message=$(echo "$file_diff" | python3 "$SCRIPT_DIR/../generator.py")
        fi

        tmpfile=$(mktemp)
        trap 'rm -f "$tmpfile"' EXIT
        
        echo "$commit_message" > "$tmpfile"

        if [[ "$confirm" == "true" ]]; then
            echo -e "$(t "Commit:")\n----------------------\n$commit_message\n----------------------"
            read -p "$(t "Do you want to continue? (y/n): ")" answer
            if [[ ! "$answer" =~ ^[yY]$ ]]; then
                echo "$(t "Skipping") $file"
                rm -f "$tmpfile"
                continue
            fi 
        else
            echo "$(t "File commit") $file"
        fi

        git commit "${flags[@]}" -F "$tmpfile" -- "$file"
        rm -f "$tmpfile"
    done
else 
    diff=$(git diff --cached)
    
    if [[ "$detailed" == "true" ]]; then
        commit_message=$(echo "$diff" | python3 "$SCRIPT_DIR/../generator.py" --detailed)
    else
        commit_message=$(echo "$diff" | python3 "$SCRIPT_DIR/../generator.py")
    fi
    
    tmpfile=$(mktemp)
    trap 'rm -f "$tmpfile"' EXIT
    echo "$commit_message" > "$tmpfile"
    
    echo -e "$(t "Commit:")\n----------------------\n$commit_message\n----------------------"
    
    if [[ "$confirm" == "true" ]]; then
        read -p "$(t "Do you want to continue? (y/n): ")" answer
        if [[ "$answer" =~ ^[yY]$ ]]; then
            git commit "${flags[@]}" -F "$tmpfile"
        else
            echo "$(t "Cancelled.")"
            exit 0
        fi
    else
        git commit "${flags[@]}" -F "$tmpfile"
    fi
fi
