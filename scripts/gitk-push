#!/bin/bash

set -e -o pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/i18n.sh"

init_i18n

remotes=($(git remote))
remote_count=${#remotes[@]}

if [ "$remote_count" -eq 0 ]; then
    echo "$(t "No configured remote repositories.")"
    exit 0
elif [ "$remote_count" -eq 1 ]; then 
    remote=${remotes[0]}
    echo "$(t "Using remote:") $remote"
else 
    echo "$(t "Multiple remotes found:")"
    for i in "${!remotes[@]}"; do 
        echo "$((i + 1)) ${remotes[$i]}" 
    done

    while true; do
        read -p "$(t "Select remote number for push: ")" index
        if [[ "$index" =~ ^[0-9]+$ ]] && [ "$index" -ge 1 ] && [ "$index" -le "$remote_count" ]; then
            remote=${remotes[$((index - 1))]}
            echo "$(t "Selected remote:") $remote"
            break
        else
            echo "$(t "Invalid input")"
        fi
    done
fi

default_branch=$(git remote show "$remote" | grep 'HEAD branch' | awk '{print $NF}')

flags=()

user_remote=""
branch=""

for arg in "$@"; do
    if [[ "$arg" == --* ]]; then
        flags+=("$arg")
    elif [ -z "$user_remote" ]; then
        user_remote="$arg"
    elif [ -z "$branch" ]; then
        branch="$arg"
    fi
done

if [ -n "$user_remote" ]; then
    remote="$user_remote"
fi

if [ -z "$branch" ]; then
    read -p "$(t "Enter branch name for push [default:") $default_branch]: " input_branch
    if [ -z "$input_branch" ]; then
        branch="$default_branch"
        echo "$(t "Branch not specified. Using:") $branch"
    else
        branch="$input_branch"
        echo "$(t "Using branch:") $branch"
    fi
else
    echo "$(t "Using branch:") $branch"
fi

git push "$remote" "$branch" "${flags[@]}"
